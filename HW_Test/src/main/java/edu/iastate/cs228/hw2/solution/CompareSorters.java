package edu.iastate.cs228.hw2.solution;

/**
 *  
 * @author Yuxiang Zhang
 *
 */

/**
 * 
 * This class executes four sorting algorithms: selection sort, insertion sort, mergesort, and
 * quicksort, over randomly generated integers as well integers from a file input. It compares the 
 * execution times of these algorithms. 
 *
 */
import java.io.FileNotFoundException;
import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class CompareSorters {
	/**
	 * This method generates a given number of random points to initialize randomPoints[]. The coordinates of these points are pseudo-random numbers within the range [-50,50] â—Š [-50,50]. Please refer
	 * to Section 3 on how such points can be generated.
	 * 
	 * @param numPts
	 *            number of points.
	 * @throws IllegalArgumentException
	 *             if numPts < 1
	 */
	public static Point[] generateRandomPoints(int numPts, Random rand) throws IllegalArgumentException {
		Point[] pts = new Point[numPts];
		for (int i = 0; i < numPts; i++)
			pts[i] = new Point(rand.nextInt(101) - 50, rand.nextInt(101) - 50);
		return pts;
	}

	/**
	 * Repeatedly take integer sequences either randomly generated or read from files. Perform the four sorting algorithms over each sequence of integers, comparing points by x-coordinate or by polar
	 * angle with respect to the lowest point.
	 * 
	 * @param args
	 * @throws FileNotFoundException
	 * @throws InputMismatchException
	 **/
	public static void main(String[] args) throws InputMismatchException, FileNotFoundException {
		// Conducts multiple sorting trials.
		// In each trial, all four algorithms are carried out over an integer array either randomly generated or input from a file.
		// A method of comparison must be through input.
		// A sample scenario is given in the project description.
		//
		// In the end of each trial, writes the sorted sequences generated by
		// selection sort, insertion sort, mergesort, and quicksort respectively to the following files
		//
		// select.txt, insert.txt, merge.txt, quick.txt.

		System.out.println("Comparison of Four Sorting Algorithms\n");
		System.out.println("keys:  1 (random integers)  2 (file input)  3 (exit)");
		System.out.println("order: 1 (by x-coordinate)  2 (by polar angle)\n");
		Scanner scan = new Scanner(System.in);
		int num, order; // number of random points, order used in sorting
		AbstractSorter[] sorters; // sorters to be used
		out: for (int t = 1;; t++) {
			System.out.print("Trial " + t + ": ");
			switch (scan.nextInt()) {
			case 1:
				System.out.print("Enter number of random points: ");
				num = scan.nextInt();
				System.out.print("Order used in sorting: ");
				order = scan.nextInt();
				System.out.println("\nalgorithm\tsize\ttime (ns)");
				System.out.println("----------------------------------\n");

				// construct a random array
				Point[] pts = generateRandomPoints(num, new Random());

				// construct sorters using the random array
				sorters = new AbstractSorter[] { new SelectionSorter(pts), new InsertionSorter(pts), new MergeSorter(pts), new QuickSorter(pts) };
				for (AbstractSorter sorter : sorters) {
					sorter.sort(order);
					sorter.draw();
					sorter.writePointsToFile();
					System.out.println(sorter.stats());
				}
				System.out.println("----------------------------------\n");
				break;
			case 2:
				System.out.println("Points from a file");
				System.out.print("File name: ");
				String name = scan.next();
				System.out.print("Order used in sorting: ");
				order = scan.nextInt();
				System.out.println("\nalgorithm\tsize\ttime (ns)");
				System.out.println("----------------------------------\n");

				// construct sorters using the input file
				sorters = new AbstractSorter[] { new SelectionSorter(name), new InsertionSorter(name), new MergeSorter(name), new QuickSorter(name) };
				for (AbstractSorter sorter : sorters) {
					sorter.sort(order);
					sorter.draw();
					sorter.writePointsToFile();
					System.out.println(sorter.stats());
				}
				System.out.println("----------------------------------\n");
				break;
			case 3:
			default:
				break out;
			}
		}
		scan.close();

		System.exit(0);
	}
}
